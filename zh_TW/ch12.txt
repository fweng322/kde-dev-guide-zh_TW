
KDE 編譯文稿 (kdesrc-build)

最簡單從頭開始編譯 KDE 軟體集 (SC) 的方式，就是執行一個名為 kdesrc-build 的文稿（先前叫做 kdesvn-build）。此文稿由 Michael Pyne 撰寫。若您剛開始編譯 KDE SC，我們強烈推薦您使用這個方式，因為它幫您處理了絕大部份的動作。這個方式與手動編譯方式相容，因此您可以先編譯安裝完後，再去變更您要處理的模組。

kdesrc-build 自動處理了以下的工作：

取出原始碼 (checkout)
如果原始碼已被取出，則下載更新。
設定模組的編譯系統
執行編譯與安裝
指定您的 CMake 選項或設定旗標（這樣您就不必每次都得記住這些值）
紀錄編譯錯誤，這樣您就可以檢視並解決問題

用這種方法編譯並不會順便幫您避開問題。您還是得花時間找出問題並解決。用其他方式編譯會出的問題，在這裡也會出現：因此您應該讀讀紀錄檔。


尋找模組有用的連結

使用 kdesrc-build 時，您可以發現它對搜尋源碼主目錄中的模組特別有用。源碼包含以下部份：
要瀏覽任何 git 中的 KDE SC 專案，您可以到 https://projects.kde.org 或 http://gitweb.kde.org/ 。
要瀏覽任何 KDE subversion 的主目錄，您可以到 http://websvn.kde.org/trunk/KDE/


設定

以下的小節包括了所有您要取得並安裝 kdesrc-build 需注意的事項。


準備事項
kdesrc-build 相當容易安裝與設定，但是您必須要先安裝一些軟體才能編譯 KDE SC。編譯 KDE SC 所需要的軟體可以參考這裡：
http://techbase.kde.org/Getting_Started/Build/Requirements

kdesrc-build 需要 Perl 5.8 或更新的版本。通常大部份的系統中它都預設會安裝。它也包含在前面所提到的連結中。您可以用

perl -v

檢查您的 Perl 版本。

您也需要 libwww，它是 Perl 中與網際網路相關的模組的集合，可以在 https://github.com/gisle/libwww-perl 取得。

下載並安裝 kdesrc-build
當您的系統設定完成並且可以編譯 KDE SC 後，您可以從此網頁上下載 kdesrc-build：

http://kdesrc-build.kde.org

您下載的檔案包括（至少）kdesrc-build 的文稿，以及一個簡單的設定檔範例。安裝 kdesrc-build 其實就只需要將檔案儲存起來，並設成可執行即可。若您喜歡，您也可以將它移動到您的 PATH 路徑中，不過在本章的範例中，我們會將它放在 KDE SC 源碼目錄中 (~/kdesrc)。

mkdir -p ~/kdesrc &&
cd ~/kdesrc &&
tar xjvf ~/path/to/kdesrc-build-1.12.tar.bz2 &&
cp kdesrc-build-1.12/kdesrc-build .

另外，最新的 kdesrc-build 文稿（與範例設定檔）也可以透過 git 下載：

git clone git://anongit.kde.org/kdesrc-build.git ~/kdesrc


修改設定檔

kdesrc-build 的設定選項會從一個名為 ~/.kdesrc-buildrc。編輯此檔案的說明在：

http://techbase.kde.org/Getting_Started/Build/kdesrc-buildrc

在 kdesrc-buildrc-sample 中大部份的預設值應該就夠用了。您可以將它複製到您的家目錄中：

cp ~/kdesrc/kdesrc-build-1.12/kdesrc-buildrc-sample ~/.kdesrc-buildrc
# 接著修改 ~/.kdesrc-buildrc。

注意設定檔的前面是以點 (.) 開頭，表示它會是一個隱藏檔。若是您用 Dolphin 或 Konqueror 看您的主目錄，您可能需要設定顯示隱藏檔，才能找到它並編輯。另外，您也可以先編輯好範例檔再把它複製到 ~/.kdesrc-buildrc。

並且要確定您要編譯的模組有被包含在裡面。注意，最少需要以下的模組：
qt-copy
kdesupport
kdelibs
kdepimlibs
kdebase

模組會依照您在 ~/.kdesrc-buildrc 檔中定義的順序編譯。所以第一個模組應該是 qt-copy。kdesupport 要在 kdelibs 之前，並且需要在任何其它 KDE SC 模組之前。

範例設定檔預設就包含了這些模組，所以您不需要再多做變更，除非您要加入其它的模組。您只要把它前面的註解拿掉即可。

若是您要編譯的模組尚不存在，您只要加在 ~/.kdesrc-buildrc 的尾端即可：

module module-name
end module

module-name 是指軟體主目錄中的模組名稱（例如 kdemultimedia）。
若是您不打算將 KDE SC 或 Qt 裝在您的家目錄中，您需要開啟 make-install-prefix 選項。然後透過 make-install-prefix 您可以用 su 或 sudo 來以管理員身份安裝，或是設定較高的權限來執行特定程式。（有些程式需要這樣設定才能正確執行）。

module kdelibs
  make-install-prefix sudo -S # sudo with no stdin
end module

module kdebase
  make-install-prefix sudo -S
end module


Git 裡的模組

大部份的 KDE SC 模組都放在 git 中，雖然有些還需要從 svn 搬到 git 中。最終，所有的 KDE SC 模組與專案都會放在 git 中。

要在 kdesrc-build 中編譯這些模組，您只要在模組設定中加入一些設定。例如，konversation 的 Git 主目錄在：

https://projects.kde.org/projects/extragear/network/konversation/repository

所以要加入此模組，您只要在 ~/.kdesrc-buildrc 尾端加上：

module konversation
    repository git://anongit.kde.org/konversation
    branch master
end module

在此範例中，我選擇 "master" 分支，因為它是預設的 git 分支。

接著不管什麼時候，只要您打算編譯 konversation，kdesrc-build 都會使用 git 而不是用 svn。


有用的 kdesrc-build 指令

kdesrc-build 是一個從命令列執行的程式，所以這裡有一些命令列選項可以用：

選項   作用
--pretend (-p)	這個選項只是做個模擬。kdesrc-build
照常會處理所有的選項與設定，跑過整個編譯流程，但是不會真的下載或執行編譯的指令，而只是印出它會做的事情的訊息。您在真正執行此編譯文稿之前，應該先跑一遍模擬，確定文稿會照您想做的事情去做。
--nosvn (--no-src)	這個選項會跳過源碼更新的程序。如果您才剛更新過，不想讓
kdesrc-build 再跑一次尋找更新的流程，就可以使用這個選項。
--refresh-build		這個選項會讓 kdesrc-build 刪掉目前的編譯資訊，然後從頭再編一次。它會花更多的時間，但是會整個從頭來過，避免先前出現的問題干擾。

後面沒有帶選項的參數就會被認為是要編譯的模組（並且會依命令列所給的順序編譯）。如果沒有指定任何模組，則會依照順序編譯在 ~/.kdesrc-buildrc 中所列出的所有模組。


編譯 KDE 軟體集

我們快完成了。如果您的設定都沒問題，那麼就可以來試試 kdesrc-build。理論上很簡單，應該就是跑 kdesrc-build 然後等等再回來看結果。

cd ~/kdesrc
./kdesrc-build

您可以先用 qt-copy 試試：

cd ~/kdesrc
./kdesrc-build qt-copy

如果編譯失敗（kdesrc-build 會顯示紅色的錯誤訊息），則您應該先檢查一些東西：

1. 是否安裝了所有需要的軟體？（如開發用函式庫）
2. 要編譯的 KDE SC 的源碼可能有問題。通常發生的原因是新提交的源碼在開發者本身的電腦沒問題，但是在您的電腦則未必。另外也有可能是因為在藍色星期一...（因為星期一 kdelibs 允許不相容的變更。）
3. ~/.kdesrc-buildrc 可能沒有正確設定。您可能把它安裝到您沒有存取權限的目錄中，或是您所指定的系統 qtdir 不存在。
4. 模組可能相依於更新版本的 qt-copy 或 kdelibs 或其它的模組。這種狀況下您要先跑過 kdesrc-build 的更新流程來將必要的模組更新。

您要怎麼找出錯誤在哪？執行失敗的指令會放在 log
目錄中。預設所有的輸出紀錄都會放在 KDE SC 源碼目錄中的 log 子目錄。log
子目錄中的樹狀結構是：log/<執行日期>/<模組名稱>/<輸出檔案>.log。為了方便您找到適當的檔案，也建立了一些符號連結：

log/latest

這個檔包含了最後一次 kdesrc-build 執行時的除錯輸出（--pretend 不會影響此行為）。

log/latest/module/error.log

包含了造成編譯特定模組失敗的除錯輸出。
例如，若是 qt-copy 編譯失敗，您可以在以下的地方找到除錯輸出：

cd ~/kdesrc
kwrite log/latest/qt-copy/error.log

當然，您可以用其它的編輯器來取代
kwrite。希望這些除錯用的輸出可以協助您找到問題所在。例如，若是失敗的原因是
CMake
告訴您少了某個函式庫，那麼您就可以安裝該函式庫然後再試一次。若是連結錯誤，您可以用 --refresh-build 選項來再一次編譯該模組（若是這樣還不能成功，則試著用該選項來編譯需要的相依模組，如 qt-copy 與 kdelibs。）

若是您沒有辦法解決錯誤，您也可以試著等個一天，再更新看看問題會不會自動消失（無誤）。您也可以試著向 kde-devel 郵件論壇發信詢問是否有其他人遇到相同的問題，或是知道解法。


安裝您編出來的 KDE 並執行

假設您已經編譯並安裝了執行整個 KDE SC 所需要的模組，您仍然需要正確設定您的環境才能成功執行。kdesrc-build （還）不會幫您把這些環境設好，所以請您參考底下的說明：

http://techbase.kde.org/Getting_Started/Using_an_IDE_with_KDE4 

請確定您使用了跟 ~/.kdesrc-buildrc 中定義相同的路徑。KDEDIRS 與 KDEDIR 變數，您應該使用 .kdesrc-buildrc 中全域設定的 "prefix" 選項的值。QTDIR 應該使用 "qtdir" 選項的值。


如何保持您的 KDE 安裝為最新版本

很簡單，只要再執行一次 kdesrc-build 即可。每次編譯時都會經過以下步驟：

1. 更新所有要編譯的模組的源碼。
2. 編譯並安裝所有的模組。

預設不會刪除舊的編譯目錄，所以如果只有小更新，通常再編譯不會花很久的時間。這稱為「漸進式編譯」（incremental make）。不過，有的時候您可能需要整個重新編譯，因為可能在編譯目錄中的設定與源碼的變更不相容。您可以用 --refresh-build 來強制整個重新編譯。

如何好好利用 kdesrc-build，您可以參考以下的文件說明：

http://kdesrc-build.kde.org/documentation/

這個站台也會說明 kdesrc-build 所使用的所有模組選項與命令列選項，並且告訴您如何執行不同的動作。
