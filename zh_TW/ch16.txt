16. KDE 開發者手冊常見問題 (FAQ)

問：我想幫忙開發 KDE SC。我要怎麼開始？
答：您可以從幫忙修正一些錯誤開始，讓您可以熟悉整個程式碼。您在 KDE Bugzilla 上可以找到不少「初階工作」。去 KDE Bugzilla (http://bugs.kde.org) 的搜尋框裡輸入 Junior Jobs 就可以看到了。
 
問：我不懂某些名詞代表的意義。
答：請到第 17 章「一般術語與 KDE 術語」找找看有沒有解釋。

問：我應該貢獻給哪個專案？
答：找您感興趣的專案，然後就開始 hack 吧！大部份的人都是自己有某些需求，或是想修正某些自己遇到的問題，接著就一腳踏入開發者的行列。您也可以去參考 KDE SC 專案列表。

問：我要怎麼設置開發環境？
答：在本書的第 10 章有介紹怎麼設置 KDE 開發編譯環境。

問：我要會哪些程式語言才能幫忙？
答：大部份的 KDE SC 專案都是用 C++ 寫的，不過 KDE SC 也有 Python、Ruby 等的語言支援。Qt 工具集對您在 KDE SC 的開發也很有幫助。

問：我需要瞭解哪些程式的觀念？
答：如果您要在 KDE 開發平台上開發專案，則最好能瞭解物件導向程式設計（OOP）。不過對開發應用程式來說，這不是絕對必要的。此外，您也要瞭解軟體版本管控與 Qt 裡的信號與信號槽（Signals and Slots）的觀念。
 
問：我要怎麼讀取回溯追蹤（backtraces）？
答：本書中的第 14 章「讀取回溯追蹤」裡有介紹。

問：我要怎麼使用 Valgrind？
答：請參考 http://techbase.kde.org/Development/Tools/Valgrind 裡對 Valgrind 的簡單概念介紹。
 
問：要開發 KDE SC，使用哪種套件最好？
答：只要能提供最新與最好的 KDE SC 套件庫的套件就可以。

問：我要怎麼回報錯誤？
答：用 Bugzilla，它是 KDE 所使用的錯誤追蹤系統。好的錯誤報告要包含所有相關的詳情，如使用的作業系統，所有相關軟體的版本號，問題發生時您正在做的動作是什麼等等。同時，清楚描述事實，並保持禮貌。關於 Bugzilla 的簡介，您可以參考：http://techbase.kde.org/Contribute/Bugsquad/Quick_Introduction_to_Bugzilla

更多常見問題與回答，請參考 http://techbase.kde.org/Category:FAQs

