
14. 讀取回溯追蹤


回溯追蹤 (backtrace，也稱為堆疊追蹤 stack trace 或堆疊回溯追蹤 stack traceback) 是一份程式如何呼叫不同的函式的報告。它可以做為程式的錯誤訊息，好讓使用者可以回報給程式開發者。

每一個函式都會在堆疊中放一份堆疊框架 (stack frame)，裡面包含了它的參數與其它執行時所需要的資訊。目前的堆疊框架反應了程式執行當下的特定點。堆疊追蹤讓您可以追蹤程式執行到該點時，經過哪些函式呼叫。在程式崩潰找問題的時候，堆疊追蹤會包含在程式錯誤發生時堆疊中所有的函式。不過要注意，程式錯誤發生時正在執行的函式不見得是問題的來源所在；它可能更早就發生（例如傳遞了不正確的參數到此函式造成崩潰）。

下圖呈現了一個堆疊框架，main() 呼叫 hello()，hello() 呼叫 hi()，hi() 又呼叫 readinput()。堆疊追蹤會從最後呼叫的函式往前回溯，所以 readinput() 會出現在第一個。

[figure]
 
回溯追蹤很有用。對您來說，它看起來可能沒什麼意義，但是它可能包含很有用的資訊。回溯追蹤描述的是程式崩潰時正在執行的函式，讓開發者可以找到問題真正的來源為何。另外確切的記憶體位址也可以協助找出問題的資料所在，就像程式崩潰時印出的
core 檔（core
檔是程式崩潰時會產生的一個檔案，裡面包含了當時記憶體中的內容。）不過要產生一個好的回溯追蹤也不是很容易：函式庫與執行檔比起它們實際上最佳化過的計數器來說，佔用的磁碟空間多得多，卻往往不能提供產生回溯追蹤需要的資訊。

在程式崩潰後，KDE Crash Dialog (Dr. Konqi) 應該會立即出現。

[figure]

 

開啟「開發者資訊」的分頁會顯示出相關的回溯追蹤。它可能會花一點時間，並且會花上大量的記憶體，所以可能系統的效能會一下子變得不好。不過結果應該會像這樣：

Using host libthread_db library "/lib/libthread_db.so.1".
[Thread debugging using libthread_db enabled]
[New Thread -1232783168 (LWP 7604)]
[KCrash handler]
#6  0x0806be76 in TreeMapItem::parent (this=0x0)
    at /home/bram/KDE/kde3/kdeaddons/konq-plugins/fsview/treemap.h:285
#7  0x08065fea in TreeMapItemList::compareItems (this=0xbfec04a8, item1=0x0,
    item2=0x0)
    at /home/bram/KDE/kde3/kdeaddons/konq-plugins/fsview/treemap.cpp:720
#8  0xb7281619 in QGList::operator== () from /usr/qt/3/lib/libqt-mt.so.3
#9  0x0806d498 in QPtrList<TreeMapItem>::operator== (this=0xbfec04a8,
    list=@0xbfec0468) at /usr/qt/3/include/qptrlist.h:74
#10 0x08062e18 in TreeMapWidget::mousePressEvent (this=0xbfec03ac,
    e=0xbfebff1c)
    at /home/bram/KDE/kde3/kdeaddons/konq-plugins/fsview/treemap.cpp:1840
#11 0xb7004a63 in QWidget::event () from /usr/qt/3/lib/libqt-mt.so.3
#12 0xb6f6bca7 in QApplication::internalNotify ()
   from /usr/qt/3/lib/libqt-mt.so.3
#13 0xb6f6ca88 in QApplication::notify () from /usr/qt/3/lib/libqt-mt.so.3
#14 0xb7725a84 in KApplication::notify (this=0xbfec055c, receiver=0xbfec03ac,
    event=0xbfebff1c)
    at /home/bram/KDE/kde3/kdelibs/kdecore/kapplication.cpp:550
#15 0xb6f0bfd2 in QETWidget::translateMouseEvent ()
   from /usr/qt/3/lib/libqt-mt.so.3
#16 0xb6f0b8b0 in QApplication::x11ProcessEvent ()
   from /usr/qt/3/lib/libqt-mt.so.3
#17 0xb6f1b761 in QEventLoop::processEvents () from /usr/qt/3/lib/libqt-mt.so.3
#18 0xb6f82831 in QEventLoop::enterLoop () from /usr/qt/3/lib/libqt-mt.so.3
#19 0xb6f826b6 in QEventLoop::exec () from /usr/qt/3/lib/libqt-mt.so.3
#20 0xb6f6b72f in QApplication::exec () from /usr/qt/3/lib/libqt-mt.so.3
#21 0x0805181e in main (argc=134673960, argv=0xffffffff)  
    at /home/bram/KDE/kde3/kdeaddons/konq-plugins/fsview/main.cpp:55  

在上面的回溯追蹤中，第一個堆疊框架是在 #6。因為整個堆疊還滿完整的，所以我們可以看到造成程式崩潰時呼叫的方法是 parent()，呼叫 parent() 的是 compareItems() (在 #7)，呼叫 compareItems() 的是重載過的 == (在 #8)，依此類推。

在前面的編號之後的十六進制數字是每個函式的堆疊框架啟始的記憶體位址。除非您有傾印出來的
core
檔，不然這個位址對您而言意義不大。對您而言更有用的是在刮號中的函式的參數列表，與它們資料的位址。因此，#6
顯示出 parent() 呼叫時只有單一個參數 this，而 this 的值是 0（十六進制表示為 0x0）。當然，this 這個名稱是在呼叫方法時指定給它的。所以 parent() 實際上呼叫時是不帶參數的。在物件導向的語言中的方法是以指標的方式傳給物件，然後會把物件本身當成第一個參數傳給方法。因此在 #7 的 compareItem() 呼叫時有兩個參數，但是 this 是第一個，所以您在 #7 的刮號中會看到三個參數。

在 #6 中，"(this=0x0)" 這個字串表示 parent() 呼叫時送進去的參數為 NULL 指標。當然，任何程式想要試著從一個它沒有存取權限的位址去接收或寫入資料時，就一定會引起崩潰。0x0 這個虛擬位址在任何電腦系統中都是保留並且不能讓程式使用的位址，所以您可以知道，這個程式的崩潰一定是由試著讀寫 NULL 所引起。您也可以看到，在 Qt 的 parent() 函式的文件說明中，它呼叫時是不帶參數的（所以這個問題不是由帶進去不正確的參數所引起），然後回傳的是該物件的父物件的指標。因此，開發者就應該要試著瞭解呼叫 parent() 方法的是哪個物件，並找出無法回傳的原因。

